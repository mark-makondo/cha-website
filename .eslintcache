[{"C:\\Users\\Mark Albert Makondo\\Desktop\\Global Projects\\cha-website\\src\\index.tsx":"1","C:\\Users\\Mark Albert Makondo\\Desktop\\Global Projects\\cha-website\\src\\components\\Header.tsx":"2","C:\\Users\\Mark Albert Makondo\\Desktop\\Global Projects\\cha-website\\src\\components\\Footer.tsx":"3","C:\\Users\\Mark Albert Makondo\\Desktop\\Global Projects\\cha-website\\src\\components\\Works.tsx":"4","C:\\Users\\Mark Albert Makondo\\Desktop\\Global Projects\\cha-website\\src\\components\\Navbar.tsx":"5","C:\\Users\\Mark Albert Makondo\\Desktop\\Global Projects\\cha-website\\src\\components\\About.tsx":"6","C:\\Users\\Mark Albert Makondo\\Desktop\\Global Projects\\cha-website\\src\\animation\\animation.tsx":"7","C:\\Users\\Mark Albert Makondo\\Desktop\\Global Projects\\cha-website\\src\\helper\\helper.tsx":"8","C:\\Users\\Mark Albert Makondo\\Desktop\\Global Projects\\cha-website\\src\\App.tsx":"9"},{"size":260,"mtime":1611406267643,"results":"10","hashOfConfig":"11"},{"size":668,"mtime":1611374724338,"results":"12","hashOfConfig":"11"},{"size":1449,"mtime":1611374737564,"results":"13","hashOfConfig":"11"},{"size":2923,"mtime":1611410210551,"results":"14","hashOfConfig":"11"},{"size":837,"mtime":1611329476661,"results":"15","hashOfConfig":"11"},{"size":1166,"mtime":1611409632770,"results":"16","hashOfConfig":"11"},{"size":14445,"mtime":1611421241068,"results":"17","hashOfConfig":"11"},{"size":908,"mtime":1611331277348,"results":"18","hashOfConfig":"11"},{"size":703,"mtime":1611375488600,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"aicc9g",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\Mark Albert Makondo\\Desktop\\Global Projects\\cha-website\\src\\index.tsx",[],["45","46"],"C:\\Users\\Mark Albert Makondo\\Desktop\\Global Projects\\cha-website\\src\\components\\Header.tsx",["47"],"import React from 'react'\r\n\r\n\r\n// svg components\r\nimport {ReactComponent as HeroLogo} from '../img/svg/hero-logo/hero-logo-colored.svg';\r\n\r\nexport interface Props {\r\n\r\n}\r\n\r\nconst Header: React.FC<Props> = ({}) => {\r\n    return (\r\n        <section className=\"header\" id=\"Home\">\r\n            <div className=\"header__container\">\r\n                <div className=\"header__logo\">\r\n                        <HeroLogo/>\r\n                    </div>\r\n\r\n                <div className=\"header__info n-span\"> \r\n                    \"I will bring out the <span>Beauty</span> in you\"\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Header;","C:\\Users\\Mark Albert Makondo\\Desktop\\Global Projects\\cha-website\\src\\components\\Footer.tsx",["48"],"import React from 'react';\r\n\r\n// svg components\r\nimport {ReactComponent as Logo} from '../img/svg/cha-logo.svg';\r\n\r\nexport interface Props{\r\n\r\n}\r\n\r\nconst Footer: React.FC<Props> = ({}) => {\r\n    return(\r\n\r\n        <section className=\"footer\" id=\"Contact\">\r\n            <div className=\"footer__container\">\r\n                <div className=\"footer__logo outside\"><Logo/></div>\r\n                <span className=\"n-span\">Check this out for more!</span>\r\n                <div className=\"footer__contacts\">\r\n                    <div className=\"footer__logo inside\"><Logo/></div>\r\n                    <ul>\r\n                        <li> \r\n                            <span><a href=\"https://www.facebook.com/chaartistbeauty\"><i className=\"fab fa-facebook\"></i></a></span>\r\n                            <span className=\"f-span\"><a href=\"https://www.facebook.com/chaartistbeauty\">|Facebook</a></span>\r\n                        </li>\r\n                        <li> \r\n                            <span><a href=\"https://www.facebook.com/chaartistbeauty\"><i className=\"fab fa-instagram\"></i></a></span>\r\n                            <span className=\"f-span\"><a href=\"https://www.facebook.com/chaartistbeauty\">|Instagram</a></span>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <span className=\"f-span\">Thank you for visiting my page!</span>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Footer;","C:\\Users\\Mark Albert Makondo\\Desktop\\Global Projects\\cha-website\\src\\components\\Works.tsx",["49","50"],"import React, { useEffect } from 'react';\r\n\r\n// svg components\r\nimport WorkLogo from '../img/svg/works-beauty.svg';\r\n\r\n// jpg components\r\nimport Default from '../img/jpg/default.jpg';\r\nimport Hair from '../img/jpg/hair.jpg';\r\nimport Eyebrows from '../img/jpg/eyebrows.jpg';\r\nimport BeautyCare from '../img/jpg/beauty-care.jpg';\r\nimport NailCare from '../img/jpg/nail-care.jpg';\r\nimport Waxing from '../img/jpg/nail-care.jpg';\r\n\r\ninterface Props{\r\n    spanId: string,\r\n    setSpanId: any\r\n}\r\n\r\nconst Works: React.FC<Props> = ({spanId, setSpanId}) =>{\r\n\r\n    const imageHandler = () => {\r\n        let works_list = document.querySelectorAll(\".works__list__container ul li\");\r\n        let works_lists = document.querySelectorAll(\".works__list__container ul li span\");\r\n        let img_box = document.querySelector(\"#img-box\") as HTMLImageElement;\r\n\r\n        const switch_img = (target:string) => {\r\n            img_box.src = target;\r\n        }\r\n\r\n        let images = [Hair, Eyebrows, BeautyCare, NailCare, Waxing];\r\n\r\n        Array.prototype.forEach.call( works_lists, (el, i) => {\r\n            let listItem = \"list__\"+i;\r\n\r\n            if(spanId === listItem){\r\n                let img = images[i]\r\n                switch_img(img);\r\n                works_lists[i].classList.add(\"active\");\r\n            }else{\r\n                works_lists[i].classList.remove(\"active\");\r\n            }\r\n\r\n        })\r\n    }\r\n    \r\n    const getCurrentId = (e:React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\r\n        spanId = e.currentTarget.id;\r\n\r\n        setSpanId(spanId);\r\n    }\r\n   \r\n    const worksList = (target:string, i:number) =>{\r\n        return(\r\n            <li className={`list__${target}`} key={i}>\r\n                <span onClick={getCurrentId} id={`list__${i}`} className=\"n-span\">{target}.</span> \r\n            </li>\r\n        )\r\n    }\r\n\r\n    const svgBackground = {\r\n        background: `url(${WorkLogo}) no-repeat center`,\r\n        backgroundSize: 'contain',\r\n    }\r\n\r\n    useEffect(()=>{\r\n        imageHandler()\r\n    },[spanId])\r\n    \r\n\r\n    let lists = [\"Hair\", \"Eyebrows\", \"Beauty Care\", \"Nail Care\", \"Waxing\"];\r\n    \r\n    return( \r\n        <section className=\"works\" id=\"Works\">\r\n            <div className=\"works__container\">\r\n                <div className=\"works__list\">\r\n                    <div className=\"works__list__container\"  style = {svgBackground} >\r\n                        <h1 className=\"works__list__title\">Featuring</h1>\r\n                        <h2>#Be it</h2>\r\n                        <ul>\r\n                            {lists.map( (list, i) => worksList(list, i))}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n                <h2>.</h2>\r\n                <div className=\"works__img-box\">\r\n                    <img id=\"img-box\" alt=\"Featured Works\" src={Default} />\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Works;","C:\\Users\\Mark Albert Makondo\\Desktop\\Global Projects\\cha-website\\src\\components\\Navbar.tsx",["51"],"import React from 'react';\r\n\r\n// svg components\r\nimport {ReactComponent as Arrow} from '../img/svg/left-arrow.svg';\r\n\r\ninterface Props{\r\n}\r\n\r\nconst navList = (listName: string, i:number) =>{\r\n    return(\r\n        <li className={`list__${listName}`} key= {i}>\r\n            <span className=\"n-span\"><a href={`#${listName}`}>{listName}</a></span>\r\n        </li>\r\n    ) \r\n}\r\n\r\n<li>\r\n\r\n</li>\r\nconst Navbar: React.FC<Props> = ({}) => {\r\n    let lists = [\"Home\", \"About\", \"Works\", \"Contact\"];\r\n\r\n    return(\r\n        <div className=\"nav\">\r\n            <div className=\"nav__container\">\r\n                <ul>\r\n                    {lists.map( (list, i) => navList(list, i) )}\r\n                   \r\n                </ul>\r\n            </div>\r\n            <div className=\"nav__arrow\"><Arrow/></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;","C:\\Users\\Mark Albert Makondo\\Desktop\\Global Projects\\cha-website\\src\\components\\About.tsx",[],"C:\\Users\\Mark Albert Makondo\\Desktop\\Global Projects\\cha-website\\src\\animation\\animation.tsx",["52"],"// libraries\r\nimport gsap from 'gsap';\r\nimport ScrollTrigger from 'gsap/ScrollTrigger';\r\nimport ScrollToPlugin from 'gsap/ScrollToPlugin';\r\n\r\n// helper functions\r\nimport Helper from '../helper/helper';\r\n\r\ngsap.registerPlugin(ScrollTrigger, ScrollToPlugin);\r\n\r\nconst animations = () => {\r\n    //#region global variables\r\n    // navbar\r\n    let nav = Helper.querySelector(\".nav\");\r\n    let nav_arrow = Helper.querySelector(\".nav__arrow\");\r\n    let nav_arrow_svg = Helper.querySelector(\".nav__arrow svg\");\r\n    let nav_list = Helper.querySelectorAll(\".nav__container ul li\");\r\n    let gsap_navList = gsap.utils.toArray(\".nav__container ul li a\");\r\n    let navList = document.querySelectorAll(\".nav__container ul li a\");\r\n    // header\r\n    let hero_beauty =  Helper.querySelector(\".header__logo #hero-beauty\");\r\n    let hero_lineOne =  Helper.querySelector(\".header__logo #hero-lineOne\");\r\n    let hero_lineTwo =  Helper.querySelector(\".header__logo #hero-lineTwo\");\r\n    let hero_cha =  Helper.querySelector(\".header__logo #hero-cha\");\r\n    let header_info = Helper.querySelector(\".header__info\");\r\n    // about\r\n    let about_img = Helper.querySelector(\".about__image-box\");\r\n    let about_title = Helper.querySelector(\".about__half h1\");\r\n    let about_info = Helper.querySelector(\".about__info\");\r\n    let about_name = Helper.querySelector(\".about__info__container h2\");\r\n    let about_say1 = Helper.querySelector(\".about__info__container span:nth-of-type(1)\");\r\n    let about_say2 = Helper.querySelector(\".about__info__container span:nth-of-type(2)\");\r\n    // works\r\n    let works_title = Helper.querySelector(\".works__list__container h2\");\r\n    let works_title_h1 = Helper.querySelector(\".works__list__container h1\");\r\n    let works_hair = Helper.querySelector(\".works__list__container ul li:nth-of-type(1)\");\r\n    let works_eyebrows = Helper.querySelector(\".works__list__container ul li:nth-of-type(2)\");\r\n    let works_beautyCare = Helper.querySelector(\".works__list__container ul li:nth-of-type(3)\");\r\n    let works_nailCare = Helper.querySelector(\".works__list__container ul li:nth-of-type(4)\");\r\n    let works_waxing = Helper.querySelector(\".works__list__container ul li:nth-of-type(5)\");\r\n    let works_img = Helper.querySelector(\".works__img-box\");\r\n\r\n    // nav handler states\r\n    let clicked = false;\r\n    let expanded = false;\r\n    let compressed = false;\r\n    // scroll trigger states\r\n    let scroll_type:string; \r\n\r\n    //#endregion\r\n\r\n     // responsive animation \r\n    const responsiveAnimation = () => {\r\n\r\n        ScrollTrigger.matchMedia({\r\n            // desktop\r\n            \"(min-width: 769px)\": function() {\r\n\r\n                animate_navHandler();\r\n                scrollTriggerArray(\"#Home\", \"top+=100 top\", \"top+=100 bottom-=200\", false, \"nav-compressed\", false, 0, \"nav-compress\");\r\n\r\n                return function() {\r\n                    ScrollTrigger.refresh(true)\r\n                };\r\n            },\r\n            // mobile\r\n            \"(max-width: 768px)\": function() {\r\n                clicked = true;\r\n                expanded = false;\r\n                compressed = true;\r\n                animate_navHandler();\r\n              \r\n                return function() {\r\n                    clicked = false;\r\n                    expanded = true;\r\n                    compressed = false;\r\n                    ScrollTrigger.refresh(true)\r\n                };\r\n            },\r\n\r\n            \"all\": function() {\r\n                // smooth scroll\r\n                navbarSmoothScroll(gsap_navList);\r\n                // sections\r\n                scrollTriggerArray(\"#Home\", \"top top+=50\", \"bottom-=100 bottom-=500\", false, \"logo-animated\", false, 0, \"logo-animate\");     \r\n                scrollTriggerArray(\"#About\", \"top top+=50\", \"bottom bottom-=500\", false, \"about-mobile-animating\", false, false, \"about-animate\");    \r\n                scrollTriggerArray(\"#Works\", \"top top+=50\", \"bottom bottom-=500\", false, \"works-animated\", false, 0, \"works-animate\");\r\n                // nav links\r\n                scrollTriggerArray(\"section\", \"top bottom-=100\", \"bottom bottom-=100\", false, \"nav-active\", false, 0, \"navLink-animate\");\r\n                // \"top+=50 top+=55\", \"bottom+=46 top+=50\"\r\n            }\r\n        })\r\n\r\n        // nav handler\r\n        animate_navHandler();\r\n        nav_arrow?.addEventListener(\"click\", click_navAnimate);\r\n    }\r\n\r\n    //#region nav event animation handler\r\n    const click_navAnimate = () => {\r\n        clicked = !clicked;\r\n\r\n        if( clicked === true ){\r\n            expanded = false;\r\n            compressed =  true;\r\n            animate_navHandler();\r\n        }else if( clicked === false ){\r\n            expanded = true;\r\n            compressed = false;\r\n            animate_navHandler();\r\n        }\r\n    }   \r\n    const animate_navHandler = () => {\r\n        let duration:number = 1;\r\n        let label:string = \"nav\";\r\n\r\n        let tl = gsap.timeline({ defaults: {\r\n            overwrite: \"auto\"\r\n        }})\r\n\r\n        if ( compressed === true ){\r\n            nav_compressed(tl, duration, label);\r\n\r\n            expanded = false;\r\n        }else if ( expanded === true ){\r\n            nav_expanded(tl, duration, label);\r\n           \r\n            compressed = true;\r\n        }\r\n    }\r\n    const nav_compressed = (tl:gsap.core.Timeline, duration: number, label: string) => {\r\n        tl.to(nav, { duration: duration, width: \"15vw\", autoAlpha: .5, ease:\"power4.inOut\" }, label)\r\n        tl.to(nav_arrow_svg, { duration: duration, rotate: \"180deg\", x:-10, fill:\"transparent\",strokeDasharray: \"110px\", ease: \"none\" }, label)\r\n        tl.to(nav_list, { x:-50, autoAlpha: 0, stagger: -.1 }, label)\r\n    }\r\n    const nav_expanded = (tl:gsap.core.Timeline, duration: number, label: string) => {\r\n        tl.to(nav, { duration: duration, width: \"70vw\", ease:\"power4.inOut\", autoAlpha: 1}, label)\r\n        tl.to(nav_arrow_svg, { duration: duration, rotate: \"0\", x:-5, fill:\"#b64a47\",strokeDasharray: \"0px\", ease: \"none\" }, label)\r\n        tl.to(nav_list, { x:0, autoAlpha: 1, stagger: .1 }, label+\"+=.5\")\r\n    }\r\n    //#endregion\r\n    \r\n    // #region scroll animations using gsap scroll trigger\r\n    const scrollTriggerArray = (main__targetArr:string, start:string, end:string, marker:boolean, toggle:string, pin:boolean, scrub:number | boolean, type:string)=> {\r\n        gsap.utils.toArray(main__targetArr).forEach( (box, i) => {\r\n            \r\n            let tl = gsap.timeline({paused: true, defaults:{\r\n                overwrite: \"auto\"\r\n            }});\r\n\r\n            interface scrollTriggerI{\r\n                trigger: any,\r\n                pin:boolean,\r\n                toggleClass: string,\r\n                start: string,\r\n                end: string,\r\n                scrub: number | boolean,\r\n                markers: boolean,\r\n                onEnter(): void,\r\n                onLeave(): void,\r\n                onEnterBack(): void,\r\n                onLeaveBack(): void,\r\n            }\r\n\r\n            const scrollTriggerObj:scrollTriggerI = {\r\n                trigger: box,\r\n                pin: pin,\r\n                toggleClass: toggle,\r\n                start: start,\r\n                end: end,\r\n                scrub: scrub,\r\n                markers: marker,\r\n                onEnter: () => {\r\n                    scroll_type = type;\r\n                    onEnter(tl);\r\n                }, \r\n                onLeave: () => {\r\n                    scroll_type = type;\r\n                    onLeave(tl);\r\n                  \r\n                },\r\n                onEnterBack: () => {\r\n                    scroll_type = type;\r\n                    onEnterBack(tl);\r\n                  \r\n                }, \r\n                onLeaveBack: () => {\r\n                    scroll_type = type;\r\n                    onLeaveBack(tl);\r\n                }\r\n            }\r\n          \r\n            if(type === \"nav-compress\"){\r\n                ScrollTrigger.create(scrollTriggerObj)\r\n\r\n            }else if(type === \"logo-animate\"){\r\n                animate_headerLogo(tl);\r\n                ScrollTrigger.create(scrollTriggerObj)\r\n\r\n            }else if(type === \"works-animate\"){\r\n                animate_works(tl);\r\n                ScrollTrigger.create(scrollTriggerObj);\r\n\r\n            }else if(type === \"navLink-animate\"){\r\n                navLinkScroll(tl, navList[i])\r\n                ScrollTrigger.create(scrollTriggerObj);\r\n\r\n            }else if(type === \"about-animate\"){\r\n                animate_about(main__targetArr, start, end , scrub, pin, marker);\r\n\r\n            }else{ console.log(\"invalid type\") }\r\n        })\r\n    }\r\n  \r\n    const onEnter = (tl:any) =>{\r\n        if(scroll_type === \"nav-compress\"){\r\n            clicked = true;\r\n            compressed = true;\r\n            expanded = false;\r\n            animate_navHandler();\r\n        }else if(scroll_type === \"logo-animate\"){\r\n            tl.play();\r\n        }else if(scroll_type === \"works-animate\"){\r\n            tl.play();\r\n        }else if(scroll_type === \"navLink-animate\"){\r\n            tl.play();\r\n        }else if(scroll_type === \"about-mobile-animate\"){\r\n            tl.play();\r\n        }\r\n    }\r\n    const onLeave = (tl:any) =>{\r\n        if(scroll_type === \"nav-compress\"){}\r\n        else if(scroll_type === \"logo-animate\"){\r\n            tl.reverse();\r\n        }else if(scroll_type === \"works-animate\"){\r\n            tl.reverse();\r\n        }else if(scroll_type === \"navLink-animate\"){\r\n            tl.reverse();\r\n        }else if(scroll_type === \"about-mobile-animate\"){\r\n            tl.reverse();\r\n        }\r\n    }\r\n    const onEnterBack = (tl:any) =>{\r\n        if(scroll_type === \"nav-compress\"){\r\n            clicked = false;\r\n            expanded = true;\r\n            compressed = false;\r\n            animate_navHandler();\r\n        }else if(scroll_type === \"logo-animate\"){\r\n            tl.play();\r\n        }else if(scroll_type === \"works-animate\"){\r\n            tl.play();\r\n        }else if(scroll_type === \"navLink-animate\"){\r\n            tl.play();\r\n        }else if(scroll_type === \"about-mobile-animate\"){\r\n            tl.play();\r\n        }\r\n    }\r\n    const onLeaveBack = (tl:any) =>{\r\n        if(scroll_type === \"nav-compress\"){}\r\n        else if(scroll_type === \"logo-animate\"){\r\n            tl.reverse();\r\n        }else if(scroll_type === \"works-animate\"){\r\n            tl.reverse();\r\n        }else if(scroll_type === \"navLink-animate\"){\r\n            tl.reverse();\r\n        }else if(scroll_type === \"about-mobile-animate\"){\r\n            tl.reverse();\r\n        }\r\n    }\r\n    const navbarSmoothScroll = (target:any) => {\r\n        window.scroll()\r\n        target.forEach((item:any, i:number) => {\r\n            item.addEventListener(\"click\", (e:any) => {\r\n                e.preventDefault();\r\n\r\n                let href = item.getAttribute(\"href\");\r\n                let query = document.querySelector(href);\r\n                // let topY = query.offsetTop;\r\n\r\n                gsap.to(window, {duration: 1, scrollTo:href, overwrite: \"auto\", ease:\"Power3.easeOut\"});\r\n            })\r\n        })\r\n    }\r\n    const navLinkScroll = (tl:gsap.core.Timeline, target:any) =>{\r\n        tl.to(target, { color: \"#FBEBEB\"} );\r\n    }\r\n    //#endregion\r\n\r\n    //#region Header Animation\r\n    const animate_headerLogo = (tl:any) => {\r\n        tl.from(hero_cha, {duration: 1, autoAlpha: 0});\r\n        tl.from([hero_lineOne, hero_lineTwo], {duration: 1, transformOrigin: \"center center\", scaleY: \"0\", stagger: -.5, ease: \"power4.inOut\"})\r\n        tl.from(hero_beauty, {duration: .5, xPercent:-20, autoAlpha: 0}, \"appear\");\r\n        tl.from(header_info, {duration: .5, autoAlpha: 0}, \"appear\");\r\n    }\r\n    //#endregion\r\n    //#region About Animation\r\n    const animate_about = (target:string, start:string, end:string, scrub:number|boolean, pin:boolean, marker: boolean) => {\r\n        \r\n        let about_tl = gsap.timeline({\r\n            scrollTrigger:{\r\n                trigger: target,\r\n                start: start, \r\n                end: end,\r\n                scrub: scrub,\r\n                pin: pin,\r\n                markers: marker,\r\n                invalidateOnRefresh: true,\r\n                toggleActions: \"play reverse play reverse\"\r\n            }\r\n        })\r\n        \r\n        animation_about(about_tl);\r\n\r\n    }   \r\n\r\n    const animation_about = (tl:gsap.core.Timeline) =>{\r\n\r\n        let el_about = [about_title, about_name, about_say1, about_say2];\r\n        let duration = .5;\r\n        let label = \"appear\", label_switch = \">\";\r\n        let clr_active = \"#EC625F\", clr_notActive = \"#FBEBEB\";\r\n\r\n        gsap.set( el_about, { autoAlpha: 0, xPercent: -10 } );\r\n        gsap.set( about_img, { scale: 0 } );\r\n        gsap.set( about_info, { autoAlpha: 0, scaleX: 0 } );\r\n        gsap.set( about_name, { color: \"#FBEBEB\"} );\r\n\r\n        tl.to( about_img, { duration: 2, scale: 1 }, label )\r\n        .to( about_title, { duration: 2, autoAlpha: 1, xPercent: 0 }, label )\r\n        .to( about_info, { autoAlpha: 1, scaleX: 1}, label+\">.5\" )\r\n        .to( about_name, { duration: duration, autoAlpha: 1, xPercent: 0,  color: clr_active, ease: \"power4.inOut\" }, label_switch )\r\n        .to( about_say1, { duration: duration, autoAlpha: 1, xPercent: 0,  color: clr_active, ease: \"power4.inOut\" }, \"nameToSay1\" )\r\n        .to( about_name, { color: clr_notActive, ease: \"power4.inOut\" }, \"nameToSay1\")\r\n        .to( about_say2, { duration: duration, autoAlpha: 1, xPercent: 0,  color: clr_active, ease: \"power4.inOut\" }, \"say1ToSay2\" )\r\n        .to( about_say1, { color: clr_notActive, ease: \"power4.inOut\" }, \"say1ToSay2\")\r\n    }\r\n\r\n    //#endregion\r\n    //#region works Animation\r\n    const animate_works = (tl:any) => { \r\n\r\n        let el_works = [ works_hair, works_eyebrows, works_beautyCare, works_nailCare, works_waxing];\r\n        let gsap_el_works = [works_title, works_hair, works_eyebrows, works_beautyCare, works_nailCare, works_waxing];\r\n        let label = \"works\"\r\n        \r\n        gsap.set( [gsap_el_works], { autoAlpha: 0, xPercent: 50  })\r\n        gsap.set( [works_img, works_title_h1], { autoAlpha: 0 })\r\n\r\n        tl.to( works_title_h1, { duration: 1, autoAlpha: 1 }, label)\r\n        tl.to( works_title, { autoAlpha:1, xPercent: 0 }, label+\"+=.5\")\r\n        tl.to(el_works, { autoAlpha: 1, xPercent: 0, stagger: .35 }, \">.2\" );\r\n        tl.to( works_img, { duration: 1, autoAlpha: 1 },label+\"+=1\"  )\r\n    }\r\n    //#endregion\r\n    return(\r\n        responsiveAnimation()\r\n    );\r\n}\r\n\r\nexport default animations;","C:\\Users\\Mark Albert Makondo\\Desktop\\Global Projects\\cha-website\\src\\helper\\helper.tsx",[],["53","54"],"C:\\Users\\Mark Albert Makondo\\Desktop\\Global Projects\\cha-website\\src\\App.tsx",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":11,"column":34,"nodeType":"61","messageId":"62","endLine":11,"endColumn":36},{"ruleId":"59","severity":1,"message":"60","line":10,"column":34,"nodeType":"61","messageId":"62","endLine":10,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":22,"column":13,"nodeType":"65","messageId":"66","endLine":22,"endColumn":23},{"ruleId":"67","severity":1,"message":"68","line":67,"column":7,"nodeType":"69","endLine":67,"endColumn":15,"suggestions":"70"},{"ruleId":"59","severity":1,"message":"60","line":20,"column":34,"nodeType":"61","messageId":"62","endLine":20,"endColumn":36},{"ruleId":"63","severity":1,"message":"71","line":278,"column":21,"nodeType":"65","messageId":"66","endLine":278,"endColumn":26},{"ruleId":"55","replacedBy":"72"},{"ruleId":"57","replacedBy":"73"},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","@typescript-eslint/no-unused-vars","'works_list' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'imageHandler'. Either include it or remove the dependency array.","ArrayExpression",["76"],"'query' is assigned a value but never used.",["74"],["75"],"no-global-assign","no-unsafe-negation",{"desc":"77","fix":"78"},"Update the dependencies array to be: [imageHandler, spanId]",{"range":"79","text":"80"},[2020,2028],"[imageHandler, spanId]"]